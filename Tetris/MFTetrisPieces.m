//
//  MFTetrisPiece.m
//  Tetris
//
//  Created by Chance Hudson on 10/31/12.
//  Copyright (c) 2012 Chance Hudson. All rights reserved.
//

#import "MFTetrisPieces.h"
#import "Constants.h"
#import "MFAppDelegate.h"

@implementation MFTetrisPieces

static MFTetrisPieces *sharedPieces = nil;

+(MFTetrisPieces*)sharedPieces{
    if(!sharedPieces)
        sharedPieces = [[MFTetrisPieces alloc] init];
    return sharedPieces;
}

// Pieces definition
int mPieces [7 /*kind */ ][4 /* rotation */ ][5 /* horizontal blocks */ ][5 /* vertical blocks */ ] =
{
    // Square
    {
        {
            {0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0},
            {0, 0, 1, 1, 0},
            {0, 0, 1, 1, 0},
            {0, 0, 0, 0, 0}
        },
        {
            {0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0},
            {0, 0, 1, 1, 0},
            {0, 0, 1, 1, 0},
            {0, 0, 0, 0, 0}
        },
        {
            {0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0},
            {0, 0, 1, 1, 0},
            {0, 0, 1, 1, 0},
            {0, 0, 0, 0, 0}
        },
        {
            {0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0},
            {0, 0, 1, 1, 0},
            {0, 0, 1, 1, 0},
            {0, 0, 0, 0, 0}
        }
    },
    
    // I
    {
        {
            {0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0},
            {0, 2, 2, 2, 2},
            {0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0}
        },
        {
            {0, 0, 0, 0, 0},
            {0, 0, 2, 0, 0},
            {0, 0, 2, 0, 0},
            {0, 0, 2, 0, 0},
            {0, 0, 2, 0, 0}
        },
        {
            {0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0},
            {2, 2, 2, 2, 0},
            {0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0}
        },
        {
            {0, 0, 2, 0, 0},
            {0, 0, 2, 0, 0},
            {0, 0, 2, 0, 0},
            {0, 0, 2, 0, 0},
            {0, 0, 0, 0, 0}
        }
    }
    ,
    // L
    {
        {
            {0, 0, 0, 0, 0},
            {0, 0, 0, 3, 0},
            {0, 3, 3, 3, 0},
            {0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0}
        },
        {
            {0, 0, 0, 0, 0},
            {0, 0, 3, 0, 0},
            {0, 0, 3, 0, 0},
            {0, 0, 3, 3, 0},
            {0, 0, 0, 0, 0}
        },
        {
            {0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0},
            {0, 3, 3, 3, 0},
            {0, 3, 0, 0, 0},
            {0, 0, 0, 0, 0}
        },
        {
            {0, 0, 0, 0, 0},
            {0, 3, 3, 0, 0},
            {0, 0, 3, 0, 0},
            {0, 0, 3, 0, 0},
            {0, 0, 0, 0, 0}
        }
    },
    // L mirrored
    {
        {
            {0, 0, 0, 0, 0},
            {0, 4, 0, 0, 0},
            {0, 4, 4, 4, 0},
            {0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0}
        },
        {
            {0, 0, 0, 0, 0},
            {0, 0, 4, 4, 0},
            {0, 0, 4, 0, 0},
            {0, 0, 4, 0, 0},
            {0, 0, 0, 0, 0}
        },
        {
            {0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0},
            {0, 4, 4, 4, 0},
            {0, 0, 0, 4, 0},
            {0, 0, 0, 0, 0}
        },
        {
            {0, 0, 0, 0, 0},
            {0, 0, 4, 0, 0},
            {0, 0, 4, 0, 0},
            {0, 4, 4, 0, 0},
            {0, 0, 0, 0, 0}
        }
    },
    // N
    {
        {
            {0, 0, 0, 0, 0},
            {0, 0, 0, 5, 0},
            {0, 0, 5, 5, 0},
            {0, 0, 5, 0, 0},
            {0, 0, 0, 0, 0}
        },
        {
            {0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0},
            {0, 5, 5, 0, 0},
            {0, 0, 5, 5, 0},
            {0, 0, 0, 0, 0}
        },
        {
            {0, 0, 0, 0, 0},
            {0, 0, 5, 0, 0},
            {0, 5, 5, 0, 0},
            {0, 5, 0, 0, 0},
            {0, 0, 0, 0, 0}
        },
        
        {
            {0, 0, 0, 0, 0},
            {0, 5, 5, 0, 0},
            {0, 0, 5, 5, 0},
            {0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0}
        }
    },
    // N mirrored
    {
        {
            {0, 0, 0, 0, 0},
            {0, 0, 6, 0, 0},
            {0, 0, 6, 6, 0},
            {0, 0, 0, 6, 0},
            {0, 0, 0, 0, 0}
        },
        {
            {0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0},
            {0, 0, 6, 6, 0},
            {0, 6, 6, 0, 0},
            {0, 0, 0, 0, 0}
        },
        {
            {0, 0, 0, 0, 0},
            {0, 6, 0, 0, 0},
            {0, 6, 6, 0, 0},
            {0, 0, 6, 0, 0},
            {0, 0, 0, 0, 0}
        },
        {
            {0, 0, 0, 0, 0},
            {0, 0, 6, 6, 0},
            {0, 6, 6, 0, 0},
            {0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0}
        }
    },
    // T
    {
        {
            {0, 0, 0, 0, 0},
            {0, 0, 7, 0, 0},
            {0, 0, 7, 7, 0},
            {0, 0, 7, 0, 0},
            {0, 0, 0, 0, 0}
        },
        {
            {0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0},
            {0, 7, 7, 7, 0},
            {0, 0, 7, 0, 0},
            {0, 0, 0, 0, 0}
        },
        {
            {0, 0, 0, 0, 0},
            {0, 0, 7, 0, 0},
            {0, 7, 7, 0, 0},
            {0, 0, 7, 0, 0},
            {0, 0, 0, 0, 0}
        },
        {
            {0, 0, 0, 0, 0},
            {0, 0, 7, 0, 0},
            {0, 7, 7, 7, 0},
            {0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0}
        }
    }
};

// Displacement of the piece to the position where it is first drawn in the board when it is created
int mPiecesInitialPosition  [7 /*kind */ ][4 /* r2otation */ ][2 /* position */] =
{
    /* Square */
    {
        {1, -2},
        {1, -2},
        {1, -2},
        {1, -2}
    },
    /* I */
    {
        {1, -1},
        {1, -2},
        {1, -1},
        {1, -2}
    },
    /* L */
    {
        {1, -2},
        {1, -2},
        {1, -2},
        {1, -1}
    },
    /* L mirrored */
    {
        {1, -2},
        {1, -1},
        {1, -2},
        {1, -2}
    },
    /* N */
    {
        {1, -2},
        {1, -2},
        {1, -2},
        {1, -1}
    },
    /* N mirrored */
    {
        {1, -2},
        {1, -2},
        {1, -2},
        {1, -1}
    },
    /* T */
    {
        {1, -2},
        {1, -2},
        {1, -2},
        {1, -1}
    },
};

-(int)getBlockType:(int)pieceType rotation:(int)rot x:(int)x y:(int)y {
    return mPieces[pieceType][rot][x][y];
}

-(TetrisPoint)getInitialPosition:(int)pieceType rotation:(int)rot{
    TetrisPoint returnPoint;
    returnPoint.x = mPiecesInitialPosition[pieceType][rot][0];
    returnPoint.y = mPiecesInitialPosition[pieceType][rot][1];
    return returnPoint;
}

@end
